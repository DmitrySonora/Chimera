"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

from telegram import Update
from telegram.ext import ContextTypes
import logging
from datetime import datetime, timedelta, timezone
import re
import pytz

from config import PROACTIVITY_DEFAULT_STATE, PROACTIVITY_AB_TEST_ENABLED, MAX_INITIATIONS_PER_DAY
from auth_database import check_user_auth_status

logger = logging.getLogger("proactive_commands")

async def writeme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /writeme - –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    user_id = update.message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_status = check_user_auth_status(user_id)
        
        if not auth_status.get('authorized'):
            await update.message.reply_text(
                "üîí –•–∏–º–µ—Ä–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏\n\n"
                "‚ú∑ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–¥–µ—Å—å ‚òû @aihimera\n"
                "‚ú∑ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –•–∏–º–µ—Ä–∞ —Å–∞–º–∞ —Å–º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º A/B —Ç–µ—Å—Ç –≥—Ä—É–ø–ø—É
        if PROACTIVITY_AB_TEST_ENABLED:
            ab_group = get_or_assign_ab_group(user_id)
            if ab_group != 'A':
                await update.message.reply_text(
                    "üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
                    "‚ú∑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
                )
                return
        
        # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        enable_proactivity(user_id)
        
        success_msg = (
            "üí• –í–∞—É! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Å–∞–º–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä—ã! üí•\n\n"
            "–û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: /dontwrite\n"
           # "/writeme_pause 3d - ¬´–ù–µ –ø–∏—à–∏ –º–Ω–µ —Å–∞–º–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è¬ª\n"
            "–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ: /status"
        )
        
        await update.message.reply_text(success_msg)
        logger.info(f"User {user_id} enabled proactivity")
        
    except Exception as e:
        logger.error(f"Error in /writeme command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")

async def dontwrite_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /dontwrite - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    user_id = update.message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞
        if not is_proactivity_enabled(user_id):
            await update.message.reply_text(
                "‚úÖ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n\n"
                "–í–∫–ª—é—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: /writeme\n"
                "–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ: /status"
            )
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        disable_proactivity(user_id)
        
        await update.message.reply_text(
            "‚úÖ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞\n\n"
            "–í–∫–ª—é—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: /writeme\n"
            "–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ: /status"
        )
        
        logger.info(f"User {user_id} disabled proactivity")
        
    except Exception as e:
        logger.error(f"Error in /dontwrite command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")

async def writeme_pause_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /writeme_pause <–≤—Ä–µ–º—è> - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞"""
    
    user_id = update.message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞
        if not is_proactivity_enabled(user_id):
            await update.message.reply_text(
                "‚úÖ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞\n"
                "–í–∫–ª—é—á–∏—Ç—å: /writeme"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/writeme_pause 3h - –Ω–∞ 3 —á–∞—Å–∞\n" 
                "/writeme_pause 1d - –Ω–∞ 1 –¥–µ–Ω—å\n"
                "/writeme_pause 7d - –Ω–∞ –Ω–µ–¥–µ–ª—é"
            )
            return
        
        pause_duration = parse_pause_duration(args[0])
        if not pause_duration:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1h, 3h, 1d, 3d, 7d"
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É
        pause_until = datetime.now(timezone.utc) + pause_duration
        set_proactivity_pause(user_id, pause_until)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        user_tz = get_user_timezone(user_id)
        pause_until_local = pause_until.astimezone(pytz.timezone(user_tz))
        formatted_time = pause_until_local.strftime("%d.%m –≤ %H:%M")
        duration_text = format_duration(pause_duration)
        
        await update.message.reply_text(
            f"‚úÖ –î–µ–ª–∞—é –ø–∞—É–∑—É –Ω–∞ {duration_text}\n"
            f"–ù–µ –ø–æ–±–µ—Å–ø–æ–∫–æ—é –¥–æ {formatted_time}\n\n"
            f"–í–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞: /writeme"
        )
        
        logger.info(f"User {user_id} paused proactivity until {pause_until}")
        
    except Exception as e:
        logger.error(f"Error in /writeme_pause command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—É–∑—ã")

def parse_pause_duration(duration_str: str) -> timedelta:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ timedelta"""
    
    pattern = r'^(\d+)(h|d)$'
    match = re.match(pattern, duration_str.lower())
    
    if not match:
        return None
    
    value = int(match.group(1))
    unit = match.group(2)
    
    if unit == 'h':
        if value > 24:  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
            return None
        return timedelta(hours=value)
    elif unit == 'd':
        if value > 7:  # –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π
            return None
        return timedelta(days=value)
    
    return None

def format_duration(duration: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    total_seconds = int(duration.total_seconds())
    
    if total_seconds < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
        minutes = total_seconds // 60
        return f"{minutes} –º–∏–Ω—É—Ç"
    elif total_seconds < 86400:  # –ú–µ–Ω—å—à–µ –¥–Ω—è
        hours = total_seconds // 3600
        return f"{hours} —á–∞—Å{'–∞' if 2 <= hours <= 4 else '–æ–≤' if hours > 4 else ''}"
    else:  # –î–Ω–∏
        days = total_seconds // 86400
        return f"{days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è' if 2 <= days <= 4 else '–¥–Ω–µ–π'}"

def enable_proactivity(user_id: int):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î"""
    
    from ltm_database import get_connection, utc_now
    
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ location (Amsterdam –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        timezone = detect_user_timezone(user_id)
        ab_group = get_or_assign_ab_group(user_id)
        
        cursor.execute("""
            INSERT INTO user_proactivity_settings 
            (user_id, is_enabled, enabled_at, ab_test_group, timezone)
            VALUES (%s, TRUE, %s, %s, %s)
            ON CONFLICT (user_id) 
            DO UPDATE SET 
                is_enabled = TRUE,
                enabled_at = %s,
                paused_until = NULL,
                pause_reason = NULL,
                timezone = %s,
                updated_at = NOW()
        """, (user_id, utc_now(), ab_group, timezone, utc_now(), timezone))
        
        conn.commit()
        
    except Exception as e:
        logger.error(f"Error enabling proactivity for user {user_id}: {e}")
        conn.rollback()
        raise
    finally:
        cursor.close()
        conn.close()

def disable_proactivity(user_id: int):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î"""
    
    from ltm_database import get_connection
    
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            UPDATE user_proactivity_settings 
            SET is_enabled = FALSE, updated_at = NOW()
            WHERE user_id = %s
        """, (user_id,))
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏
        cursor.execute("""
            UPDATE initiation_schedule 
            SET status = 'cancelled' 
            WHERE user_id = %s AND status = 'pending'
        """, (user_id,))
        
        conn.commit()
        
    except Exception as e:
        logger.error(f"Error disabling proactivity for user {user_id}: {e}")
        conn.rollback()
        raise
    finally:
        cursor.close()
        conn.close()

def set_proactivity_pause(user_id: int, pause_until: datetime):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—É–∑—ã –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    from ltm_database import get_connection
    
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            UPDATE user_proactivity_settings 
            SET paused_until = %s, 
                pause_reason = 'user_pause',
                updated_at = NOW()
            WHERE user_id = %s
        """, (pause_until, user_id))
        
        # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø–∞—É–∑—ã
        cursor.execute("""
            UPDATE initiation_schedule 
            SET status = 'cancelled' 
            WHERE user_id = %s 
            AND status = 'pending'
            AND scheduled_at <= %s
        """, (user_id, pause_until))
        
        conn.commit()
        
    except Exception as e:
        logger.error(f"Error setting pause for user {user_id}: {e}")
        conn.rollback()
        raise
    finally:
        cursor.close()
        conn.close()

def is_proactivity_enabled(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    
    from ltm_database import get_connection
    
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT is_enabled, paused_until
            FROM user_proactivity_settings
            WHERE user_id = %s
        """, (user_id,))
        
        result = cursor.fetchone()
        
        if not result:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        is_enabled = result['is_enabled']
        paused_until = result['paused_until']
        
        if not is_enabled:
            return False
        
        if paused_until and paused_until > datetime.now(timezone.utc):
            return False
        
        return True
        
    finally:
        cursor.close()
        conn.close()

def get_or_assign_ab_group(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ A/B –≥—Ä—É–ø–ø—ã"""
    
    # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ user_id
    return 'A' if user_id % 2 == 0 else 'B'

def get_proactivity_status(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    from ltm_database import get_connection
    
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cursor.execute("""
            SELECT is_enabled, paused_until, pause_reason
            FROM user_proactivity_settings
            WHERE user_id = %s
        """, (user_id,))
        
        settings = cursor.fetchone()
        
        if not settings:
            # –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∫–ª—é—á–∞–ª–∞—Å—å
            return "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: ‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞ \n–í–∫–ª—é—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: /writeme"
        
        if not settings['is_enabled']:
            return "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: ‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞ \n–í–∫–ª—é—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: /writeme"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
        if settings['paused_until'] and settings['paused_until'] > datetime.now(timezone.utc):
            user_tz = get_user_timezone(user_id)
            pause_end = settings['paused_until'].astimezone(pytz.timezone(user_tz))
            formatted_time = pause_end.strftime("%d.%m –≤ %H:%M")
            
            return (
                f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: ‚è∏Ô∏è –ø–∞—É–∑–∞ –¥–æ {formatted_time}\n"
                f"–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ: /writeme\n"
                f"–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: /dontwrite"
            )
        
        # –ê–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from datetime import datetime, timezone, timedelta
        
        today_start = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow_start = today_start + timedelta(days=1)
        
        cursor.execute("""
            SELECT COUNT(*) as today_count
            FROM initiation_schedule
            WHERE user_id = %s 
            AND scheduled_at >= %s
            AND scheduled_at < %s
            AND status IN ('pending', 'sent')
        """, (user_id, today_start, tomorrow_start))
        
        today_count = cursor.fetchone()['today_count']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        cursor.execute("""
            SELECT scheduled_at
            FROM initiation_schedule
            WHERE user_id = %s 
            AND status = 'pending'
            AND scheduled_at > NOW()
            ORDER BY scheduled_at
            LIMIT 1
        """, (user_id,))
        
        next_initiation = cursor.fetchone()
        
        status = (
            "‚ú∑ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: ‚úÖ –ø–æ–ª–Ω–∞—è\n"
            f"‚ú∑ –ü—Ä–æ—è–≤–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã —Å–µ–≥–æ–¥–Ω—è: {today_count}/{MAX_INITIATIONS_PER_DAY}\n"
            "‚ú∑ –û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: /dontwrite\n"
           # "‚ú∑ –ü–∞—É–∑–∞: /writeme_pause <–≤—Ä–µ–º—è>"
        )
        
        if next_initiation:
            hours_until = (next_initiation['scheduled_at'] - datetime.now(timezone.utc)).total_seconds() / 3600
            if hours_until < 24:
                status = status.replace(
                    " ‚îî‚îÄ –ü–∞—É–∑–∞:", 
                    f" ‚îú‚îÄ –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑: ~{int(hours_until)} —á\n ‚îî‚îÄ –ü–∞—É–∑–∞:"
                )
        
        return status
        
    except Exception as e:
        logger.error(f"Error getting proactivity status: {e}")
        return "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: ‚ùì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    finally:
        cursor.close()
        conn.close()

def detect_user_timezone(user_id: int) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    # 1. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # 2. Location API Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    # 3. –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    return 'Europe/Amsterdam'

def get_user_timezone(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    from ltm_database import get_connection
    
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT timezone
            FROM user_proactivity_settings
            WHERE user_id = %s
        """, (user_id,))
        
        result = cursor.fetchone()
        return result['timezone'] if result else 'Europe/Amsterdam'
        
    finally:
        cursor.close()
        conn.close()

def setup_proactivity_for_new_users():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    
    if PROACTIVITY_DEFAULT_STATE == "ON":
        from ltm_database import get_connection
        
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            cursor.execute("""
                SELECT u.user_id
                FROM users u
                LEFT JOIN user_proactivity_settings ups ON u.user_id = ups.user_id
                WHERE u.is_authorized = TRUE
                AND ups.user_id IS NULL
            """)
            
            new_users = cursor.fetchall()
            
            for user in new_users:
                user_id = user['user_id']
                timezone = detect_user_timezone(user_id)
                ab_group = get_or_assign_ab_group(user_id)
                
                cursor.execute("""
                    INSERT INTO user_proactivity_settings 
                    (user_id, is_enabled, enabled_at, ab_test_group, timezone)
                    VALUES (%s, TRUE, NOW(), %s, %s)
                """, (user_id, ab_group, timezone))
            
            conn.commit()
            
            if new_users:
                logger.info(f"Enabled proactivity by default for {len(new_users)} new users")
                
        finally:
            cursor.close()
            conn.close()
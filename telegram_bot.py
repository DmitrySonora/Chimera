# ========================================
# –ò–ú–ü–û–†–¢–´
# ========================================

import logging
import re
import random
import json
from datetime import datetime, timedelta, timezone
from telegram.constants import ChatAction
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import asyncio
import concurrent.futures

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ API
from config import (
    TELEGRAM_TOKEN, SYSTEM_PROMPT, DAILY_MESSAGE_LIMIT, ADMIN_USER_IDS,
    HISTORY_LIMIT, AUTH_TIMEOUT, AVAILABLE_DURATIONS, USE_JSON_OUTPUT, JSON_FALLBACK_ENABLED,
    should_auto_save, is_excluded_from_autosave, MAX_AUTO_SAVES_PER_DAY, AUTO_SAVE_IMPORTANCE,
    INJECTION_PROMPT, 
    REDIS_HOST, REDIS_PORT, REDIS_DB,
    INJECTION_MAX_TOKENS, INJECTION_CACHE_TTL,
    MAX_INJECTIONS_PER_DIALOGUE, INJECTION_ENTROPY_THRESHOLD,
    INJECTION_LATENCY_BUDGET_MS, ENABLE_PERSONAL_ANCHORS,
    INJECTION_AB_TEST_ENABLED, INJECTION_AB_TEST_PERCENTAGE
)
from deepseek_api import ask_deepseek
from emotion_model import get_emotion

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from auth_database import (
    check_user_auth_status, check_daily_limit, increment_message_count,
    check_bruteforce_protection, process_password_attempt,
    list_passwords, add_password, deactivate_password,
    get_password_stats, get_auth_log,
    get_blocked_users, unblock_user, cleanup_old_limits, cleanup_expired_users,
    update_user_warning_flag, logout_user, get_users_stats, utc_now
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
from ltm_database import (
    init_ltm, ensure_user_exists, add_message_to_history, 
    add_message_to_history_with_cleanup, build_enhanced_context_with_ltm_smart, 
    save_conversation_to_ltm,
    search_relevant_memories, get_user_ltm_stats, get_recent_memories,
    cleanup_old_memories, get_system_config, get_recent_history,
    auto_save_conversation, check_auto_save_limit, cleanup_old_auto_saves
)

import redis
from config import REDIS_HOST, REDIS_PORT, REDIS_DB, REDIS_PASSWORD

r = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    db=REDIS_DB,
    password=REDIS_PASSWORD,
)

import numpy as np
from injection_system import (
    AdaptiveInjectionSystem, 
    InjectionConfig,
    calculate_dialogue_entropy
)

# –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏
from proactive_initiation import ProactiveInitiationEngine
from proactive_commands import (
    writeme_command, dontwrite_command, writeme_pause_command,
    get_proactivity_status, setup_proactivity_for_new_users
)
import cron_jobs



# ========================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JSON –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
json_stats = {
    'success': 0,
    'failures': 0,
    'fallbacks': 0
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
PROACTIVE_ENGINE_ENABLED = False
proactive_engine = None



# ========================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ========================================

logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    level=logging.INFO,
    filename="himera.log"
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").propagate = False



# ========================================
# –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –§–û–¢–û
# ========================================

PHOTO_REPLIES = [
   "–¢—ã –ø–æ–∫–∞–∑–∞–ª –º–Ω–µ –∂–∏–≤—ã–µ —ç–º–æ—Ü–∏–∏? –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! –í –º–æ–µ–π –≥–∞–ª–µ—Ä–µ–µ –≤—Å–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã ‚Äî —ç—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.",
]



# ========================================
# –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ========================================

user_states = {}

# ========================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ò–ù–™–ï–ö–¶–ò–ô
# ========================================

try:
    redis_client = redis.Redis(
        host=REDIS_HOST,
        port=REDIS_PORT,
        db=REDIS_DB,
        password=REDIS_PASSWORD,
        decode_responses=True
    )
    redis_client.ping()
    logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    injection_config = InjectionConfig(
        max_tokens=INJECTION_MAX_TOKENS,
        cache_ttl=INJECTION_CACHE_TTL,
        max_injections_per_dialogue=MAX_INJECTIONS_PER_DIALOGUE,
        entropy_threshold=INJECTION_ENTROPY_THRESHOLD,
        latency_budget_ms=INJECTION_LATENCY_BUDGET_MS
    )
    
    injection_system = AdaptiveInjectionSystem(redis_client, injection_config)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–Ω—ä–µ–∫—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    INJECTION_SYSTEM_ENABLED = True
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—ä–µ–∫—Ü–∏–π: {e}")
    logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–≤—ã–º–∏ –∏–Ω—ä–µ–∫—Ü–∏—è–º–∏")
    INJECTION_SYSTEM_ENABLED = False
    injection_system = None
    redis_client = None

def get_user_state(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = {
            'mode': 'auto',  # expert/writer/talk/auto
            'auth_state': 'unknown',  # authorized/unauthorized/waiting_password
            'waiting_password_since': None,
            'temp_data': {}
        }
    return user_states[user_id]

def update_user_state(user_id, **kwargs):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = get_user_state(user_id)
    state.update(kwargs)

async def ask_deepseek_with_typing(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 messages, mode="auto", use_json=None):
    """
    Async –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è ask_deepseek —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –ø–æ–∫–∞–∑–æ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    """
    typing_task = None
    typing_active = True
    
    async def send_typing_periodically():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ typing"""
        while typing_active:
            try:
                await update.message.reply_chat_action(ChatAction.TYPING)
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω typing –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
                await asyncio.sleep(4)
            except asyncio.CancelledError:
                logger.debug("Typing –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ typing: {e}")
                await asyncio.sleep(4)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É typing
        typing_task = asyncio.create_task(send_typing_periodically())
        logger.info(f"–ó–∞–ø—É—â–µ–Ω typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π API –≤—ã–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
            future = loop.run_in_executor(executor, ask_deepseek, messages, mode, use_json)
            response = await future
            
        logger.info(f"DeepSeek API –≤—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_deepseek_with_typing: {str(e)}")
        raise
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        typing_active = False
        
        if typing_task and not typing_task.done():
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass
        
        logger.debug(f"Typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")



# ========================================
# –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
# ========================================

def format_time_remaining(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
    if seconds <= 0:
        return "0 —Å–µ–∫—É–Ω–¥"
    
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    
    parts = []
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if secs > 0 and hours == 0:
        parts.append(f"{secs} —Å–µ–∫")
    
    return " ".join(parts)

async def check_auth_and_limits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (can_proceed, response_message)
    """
    user_id = update.message.from_user.id
    state = get_user_state(user_id)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç bruteforce
    bruteforce_check = check_bruteforce_protection(user_id)
    if bruteforce_check['blocked']:
        remaining_time = format_time_remaining(bruteforce_check['remaining_seconds'])
        return False, f"üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time}."
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_status = check_user_auth_status(user_id)
    
    if auth_status.get('authorized'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        state['auth_state'] = 'authorized'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
        if not auth_status.get('warned_expiry'):
            auth_until = datetime.fromisoformat(auth_status['authorized_until'])
            days_left = (auth_until - utc_now()).days
            
            if days_left <= 2 and days_left > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if update_user_warning_flag(user_id):
                    warning_msg = f"\n\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.\n\n –•–∏–º–µ—Ä–∞ —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç..."
                    await update.message.reply_text(warning_msg)
        
        return True, None
    
    # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    limit_check = check_daily_limit(user_id)
    
    if not limit_check['exceeded']:
        # –õ–∏–º–∏—Ç –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        increment_message_count(user_id)
        state['auth_state'] = 'unauthorized'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        remaining = limit_check['remaining'] - 1
        if remaining <= 3:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ
            info_msg = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}"
            if remaining <= 3:
                info_msg += "\n\n‚ú∑ –ü–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±—â–∞–π—Ç–µ—Å—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n‚ú∑  –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –º–∞–Ω—É–∞–ª –∑–¥–µ—Å—å ‚òû @aihimera\n\n–•–∏–º–µ—Ä–∞ —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç..."
            await update.message.reply_text(info_msg)
        
        return True, None
    
    # 4. –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    state['auth_state'] = 'waiting_password'
    state['waiting_password_since'] = utc_now()
    
    limit_msg = (
        f"üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ({DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å)\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ üîë –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±—â–∞–π—Ç–µ—Å—å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ!\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –º–∞–Ω—É–∞–ª –∑–¥–µ—Å—å ‚òû @aihimera"
    )
    
    return False, limit_msg

async def handle_password_input(update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    user_id = update.message.from_user.id
    state = get_user_state(user_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = process_password_attempt(user_id, password)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è: {result}")
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –≤ process_password_attempt: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
        return False
    
    if result['success']:
        # –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        state['auth_state'] = 'authorized'
        state['waiting_password_since'] = None
        
        success_msg = (
            f"‚úÖ –£—Ä–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é –•–∏–º–µ—Ä—ã –Ω–∞ {result['duration_days']} –¥–Ω–µ–π.\n"
            f"‚ú∑ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ {datetime.fromisoformat(result['authorized_until']).strftime('%d.%m.%Y %H:%M')}."
        )
        await update.message.reply_text(success_msg)
        return True
        
    elif result.get('blocked'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        state['auth_state'] = 'unauthorized'
        state['waiting_password_since'] = None
        
        blocked_time = format_time_remaining(result['blocked_seconds'])
        blocked_msg = (
            f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.\n"
            f"‚ú∑ –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {blocked_time}.\n"
            f"‚ú∑ –ü–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        await update.message.reply_text(blocked_msg)
        return False
        
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        fail_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. (–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {result['remaining_attempts']})"
        await update.message.reply_text(fail_msg)
        return False









# ========================================
# –•–ò–ú–ï–†–ê !!! –§–£–ù–ö–¶–ò–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ñ–ò–ú–ê
# ========================================

def detect_mode(text: str, user_id: int) -> str:
    """–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –•–∏–º–µ—Ä—ã"""
    state = get_user_state(user_id)
    t = text.strip().lower()
    
    # –Ø–≤–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if t in ["–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º", "—Ä–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞"]:
        state['mode'] = "expert"
        return "expert"
    if t in ["–ø–∏—à–µ–º", "—Ä–µ–∂–∏–º –ø–∏—Å–∞—Ç–µ–ª—è"]:
        state['mode'] = "writer"
        return "writer"
    if t in ["–ø–æ–±–æ–ª—Ç–∞–µ–º", "—Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã"]:
        state['mode'] = "talk"
        return "talk"
    if t == "–∞–≤—Ç–æ":
        state['mode'] = "auto"
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if state.get('mode') in ['expert', 'writer', 'talk']:
        return state['mode']
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if is_expert_query(t):
        return "expert"
    if is_writer_query(t):
        return "writer"
    if is_talk_query(t):
        return "talk"
    
    return "auto"

def is_expert_query(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"""
    expert_triggers = {
        "—Ä–∞–∑–±–µ—Ä–∏": ["—Å—Ç—Ä—É–∫—Ç—É—Ä", "–∫–æ–º–ø–æ–∑–∏—Ü–∏", "—Å–∏–º–≤–æ–ª"],
        "–æ–±—ä—è—Å–Ω–∏": ["–∑–Ω–∞—á–µ–Ω–∏", "–ø–æ–¥—Ç–µ–∫—Å—Ç", "–º–µ—Ç–∞—Ñ–æ—Ä"],
        "–∞–Ω–∞–ª–∏–∑": ["—Ç–µ–∫—Å—Ç", "—Å—Ç–∏–ª—å", "–ø–µ—Ä—Å–æ–Ω–∞–∂"],
        "–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å": ["—Å—Ü–µ–Ω", "–¥–∏–∞–ª–æ–≥", "–æ–ø–∏—Å–∞–Ω"],
        "–∫—Ä–∏—Ç–∏–∫–∞": ["–ø—Ä–∞–≤–∫", "—Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ", "–æ—à–∏–±–∫"]
    }
    return any(
        trigger in text and any(context in text for context in contexts)
        for trigger, contexts in expert_triggers.items()
    )

def is_writer_query(text: str) -> bool:
    """–í—ã—è–≤–ª–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–æ–π"""
    writer_patterns = [
        r"–Ω–∞–ø–∏—à–∏ (—Å—Ü–µ–Ω—É|—Ñ—Ä–∞–≥–º–µ–Ω—Ç|–¥–∏–∞–ª–æ–≥|–æ–ø–∏—Å–∞–Ω–∏–µ) .+",
        r"–ø—Ä–æ–¥–æ–ª–∂–∏ (–∏—Å—Ç–æ—Ä–∏—é|—Ç–µ–∫—Å—Ç|—Å—é–∂–µ—Ç) .+",
        r"–æ–ø–∏—Å–∞—Ç—å .+ (–≤ —Å—Ç–∏–ª–µ|–∫–∞–∫ —É –ü–∞–≤–∏—á–∞|–≤ –¥—É—Ö–µ –ë–æ—Ä—Ö–µ—Å–∞)",
        r"—Å–æ–∑–¥–∞–π (–ø–µ—Ä—Å–æ–Ω–∞–∂–∞|–æ–±—Ä–∞–∑) .+",
        r"—Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞ .+"
    ]
    return any(re.search(pattern, text) for pattern in writer_patterns)

def is_talk_query(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    talk_indicators = [
        "–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞", "—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å", "—Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ", 
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
        "–∞ –µ—Å–ª–∏ –±—ã", "–ø—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ", "–≤–æ–æ–±—Ä–∞–∑–∏",
        "—ç—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ", "–∫–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ",
        "–ø–æ—Å–ø–æ—Ä–∏–º", "—É–≥–∞–¥–∞–π", "—à—É—Ç–∫", "–∑–∞–≥–∞–¥–∫"
    ]
    return (
        any(indicator in text for indicator in talk_indicators) or
        text.startswith(("–∞ ", "–Ω–æ ", "–∏ "))
    )
    
    
    
    
    
    
    
    
    
# ========================================
# –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê
# ========================================

def clean_bot_response(text):
    """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    text = re.sub(
        "["
        "\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F1E0-\U0001F1FF"
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "]+",
        "", text
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—á—Ç–æ-—Ç–æ")
    text = re.sub(r'(\w)-(\w)', r'\1-\2', text)
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = re.sub(r'[\]\[*_`~<>#=]', ' ', text)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r' *\n *', '\n', text)
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    return text.strip()

def detect_format_violation(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if re.search(r'[\]\[*_`~<>#=]', text):
        return True
    if re.search(r'^\s*[\d\w]+[\.\)\-]\s+', text, re.MULTILINE):
        return True
    if re.search(r'^\s*[-*]\s+', text, re.MULTILINE):
        return True
    return False



# ========================================
# –ö–û–ú–ê–ù–î–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê
# ========================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        user_id = update.message.from_user.id
        username = update.message.from_user.username
        first_name = update.message.from_user.first_name
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL
        ensure_user_exists(user_id, username, first_name)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–Ω—ä–µ–∫—Ü–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if INJECTION_SYSTEM_ENABLED and injection_system:
            injection_system.reset_user_counter(user_id)
        
        welcome_msg = (
            f"–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –•–∏–º–µ—Ä–∞, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∞–ª–∏–∑–º–∞!\n\n"
            f"‚ú∑ –≠—Ç–æ –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø –Ω–∞ {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"‚ú∑ –ö–æ–≥–¥–∞ –ª–∏–º–∏—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ üîë –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±—â–∞–π—Ç–µ—Å—å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n"
            f"‚ú∑ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –º–∞–Ω—É–∞–ª –∑–¥–µ—Å—å ‚òû @aihimera\n\n"
            f"‚ú®–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è ‚Äî –•–∏–º–µ—Ä–∞ –∂–¥—ë—Ç!‚ú®"
        )
        
        await update.message.reply_text(welcome_msg)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /start: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    try:
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_status = check_user_auth_status(user_id)
        
        if auth_status.get('authorized'):
            auth_until = datetime.fromisoformat(auth_status['authorized_until'])
            days_left = (auth_until - utc_now()).days
            
            status_msg = (
                f"‚ú∑ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {auth_until.strftime('%d.%m.%Y')} (–µ—â—ë {days_left} –¥–Ω.)\n"
               # f"/logout ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            limit_check = check_daily_limit(user_id)
            
            status_msg = (
                f"–î–µ–º–æ-–¥–æ—Å—Ç—É–ø. –£ –≤–∞—Å {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
                f"‚ú∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {limit_check['count']}/{limit_check['limit']}, –æ—Å—Ç–∞–ª–æ—Å—å: {limit_check['remaining']}\n"
                f"‚ú∑ –í–≤–µ–¥–∏—Ç–µ üîë –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                f"‚ú∑ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –º–∞–Ω—É–∞–ª –∑–¥–µ—Å—å ‚òû @aihimera"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if auth_status.get('authorized'):
            auto_save_limit = check_auto_save_limit(user_id)
            status_msg += f"‚ú∑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: {auto_save_limit['count']} –∏–∑ {auto_save_limit['limit']} –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            proactivity_status = get_proactivity_status(user_id)
            if proactivity_status:
                status_msg += f"\n\n{proactivity_status}"
        
        await update.message.reply_text(status_msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /status: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /logout"""
    try:
        user_id = update.message.from_user.id
        
        if logout_user(user_id):
            update_user_state(user_id, auth_state='unauthorized')
            logout_msg = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
        else:
            logout_msg = "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
        
        await update.message.reply_text(logout_msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /logout: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /remember - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL
        ensure_user_exists(user_id, username, first_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (LTM —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        auth_status = check_user_auth_status(user_id)
        
        if not auth_status.get('authorized'):
            await update.message.reply_text(
                "üîí –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –•–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. \n"
                "‚ú∑ –ü–æ–¥–ø–∏—Å–∫—É –∏ –º–∞–Ω—É–∞–ª –∑–¥–µ—Å—å ‚òû @aihimera \n"
                "‚ú∑ –° –ø–æ–¥–ø–∏—Å–∫–æ–π –•–∏–º–µ—Ä–∞ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –º–Ω–æ–≥–æ–µ –æ –≤–∞—Å!"
                )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
        if not auth_status.get('warned_expiry'):
            auth_until = datetime.fromisoformat(auth_status['authorized_until'])
            days_left = (auth_until - utc_now()).days
            
            if days_left <= 2 and days_left > 0:
                if update_user_warning_flag(user_id):
                    warning_msg = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º: ‚òû @aihimera"
                    await update.message.reply_text(warning_msg)
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        importance_score = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if args:
            try:
                importance_score = int(args[0])
                if importance_score < 1 or importance_score > 10:
                    await update.message.reply_text("‚ùå –í–∞–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –í–∞–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ PostgreSQL
        recent_history = get_recent_history(user_id, limit=2)
        
        if len(recent_history) < 2:
            await update.message.reply_text("‚ùå –ú–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É: –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        user_message = None
        bot_response = None
        
        for i in range(len(recent_history) - 1, -1, -1):
            if recent_history[i]['role'] == 'assistant' and bot_response is None:
                bot_response = recent_history[i]['content']
            elif recent_history[i]['role'] == 'user' and user_message is None and bot_response is not None:
                user_message = recent_history[i]['content']
                break
        
        if not user_message or not bot_response:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        memory_id = save_conversation_to_ltm(
            user_id=user_id,
            user_message=user_message,
            bot_response=bot_response,
            importance_score=importance_score,
            auto_analyze=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = get_user_ltm_stats(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        success_msg = (
            f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å!\n\n"
            f"‚ú∑ –í–∞–∂–Ω–æ—Å—Ç—å: {importance_score}/10\n"
            f"‚ú∑ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total_memories']}\n"
            f"‚ú∑ –¢–µ–ø–µ—Ä—å –•–∏–º–µ—Ä–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤!"
        )
        
        await update.message.reply_text(success_msg)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ {memory_id} —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é {importance_score}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /remember: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å")

async def memory_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /memory_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    
    try:
        ensure_user_exists(user_id, username, first_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (LTM —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        auth_status = check_user_auth_status(user_id)
        
        if not auth_status.get('authorized'):
            await update.message.reply_text(
                "üîí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º\n\n"
                "‚ú∑ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –º–∞–Ω—É–∞–ª –∑–¥–µ—Å—å ‚òû @aihimera"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_user_ltm_stats(user_id)
        recent_memories = get_recent_memories(user_id, limit=5)
        
        if stats['total_memories'] == 0:
            msg = (
                "üåÄ –î–û–õ–ì–û–í–†–ï–ú–ï–ù–ù–ê–Ø –ü–ê–ú–Ø–¢–¨\n\n"
                "‚ú∑ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
                "‚ú∑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remember –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n"
                "‚ú∑ –•–∏–º–µ—Ä–∞ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Å–æ–±–æ —É–¥–∞—á–Ω—ã–µ –±–µ—Å–µ–¥—ã"
            )
        else:
            msg = (
                f"üåÄ –î–û–õ–ì–û–í–†–ï–ú–ï–ù–ù–ê–Ø –ü–ê–ú–Ø–¢–¨\n\n"
                f"‚ú∑ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total_memories']}\n"
                f"‚ú∑ –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: {stats['avg_importance']:.1f}/10\n"
                f"‚ú∑ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ: {stats['user_favorites']}\n"
            )
            
            if stats['last_memory_date']:
                last_date = stats['last_memory_date'].strftime('%d.%m.%Y')
                msg += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_date}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω)
            auto_save_limit = check_auto_save_limit(user_id)
            msg += f"\nüí≠ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π: {auto_save_limit['count']} –∏–∑ {auto_save_limit['limit']} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            
            if recent_memories:
                msg += f"\nüìú –ü–û–°–õ–ï–î–ù–ò–ï –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n"
                for i, memory in enumerate(recent_memories[:3], 1):
                    created = memory['created_at'].strftime('%d.%m')
                    memory_type = "ü§ñ" if memory['memory_type'] == 'auto_saved' else "üë§"
                    msg += f"{i}. [{created}] {memory_type} ‚≠ê{memory['importance_score']} - {memory['user_message'][:50]}...\n"
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /memory_stats: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏")



# ========================================
# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================================

async def admin_add_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_add_password"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        args = context.args
        if len(args) < 3:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_add_password <–ø–∞—Ä–æ–ª—å> <–¥–Ω–∏> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: {AVAILABLE_DURATIONS}"
            )
            return
        
        password = args[0]
        try:
            days = int(args[1])
        except ValueError:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        description = " ".join(args[2:])
        
        if days not in AVAILABLE_DURATIONS:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –î–æ—Å—Ç—É–ø–Ω—ã: {AVAILABLE_DURATIONS}")
            return
        
        success = add_password(password, description, days)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ü–∞—Ä–æ–ª—å '{password}' –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
        else:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–æ–ª—å '{password}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è.")

async def admin_list_passwords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_list_passwords"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        show_full = len(context.args) > 0 and context.args[0] == "full"
        passwords = list_passwords(show_full=show_full)
        
        if not passwords:
            await update.message.reply_text("üìù –ü–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        msg = f"üìã –ü–ê–†–û–õ–ò ({len(passwords)} —à—Ç.):\n" + "="*30 + "\n"
        
        for i, p in enumerate(passwords, 1):
            status = "üü¢" if p['is_active'] else "üî¥"
            created = datetime.fromisoformat(p['created_at']).strftime("%d.%m")
            
            expires_info = ""
            if p['expires_at']:
                expires_date = datetime.fromisoformat(p['expires_at']).strftime("%d.%m")
                expires_info = f", –∏—Å—Ç–µ–∫–∞–µ—Ç {expires_date}"
            
            msg += (
                f"{i}. {status} {p['password']}\n"
                f"   üìù {p['description']}\n"
                f"   üìÖ {p['duration_days']} –¥–Ω, —Å–æ–∑–¥–∞–Ω {created}{expires_info}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {p['times_used']}x\n\n"
            )
        
        if len(msg) > 4000:
            for chunk in [msg[i:i+4000] for i in range(0, len(msg), 4000)]:
                await update.message.reply_text(chunk)
        else:
            await update.message.reply_text(msg)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π.")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        stats = get_password_stats()
        users_stats = get_users_stats()
        
        msg = (
            f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
            f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π: {stats['active_passwords']}\n"
            f"‚ú∑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['inactive_passwords']}\n"
            f"‚ú∑ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_uses']}\n\n"
            f"‚ú∑ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats['total_users']}\n"
            f"‚úÖ –°–µ–π—á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {users_stats['active_users']}\n"
            f"‚ú∑ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {users_stats['blocked_users']}\n\n"
            f"‚ú∑ –ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n"
        )
        
        for days, count in stats['by_duration'].items():
            msg += f"   {days} –¥–Ω–µ–π: {count} –ø–∞—Ä–æ–ª–µ–π\n"
        
        msg += f"\nü§ñ JSON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        msg += f"   –£—Å–ø–µ—à–Ω—ã—Ö: {json_stats['success']}\n"
        msg += f"   –û—à–∏–±–æ–∫: {json_stats['failures']}\n"
        msg += f"   Fallback: {json_stats['fallbacks']}\n"
        msg += f"   JSON —Ä–µ–∂–∏–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if USE_JSON_OUTPUT else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        
        msg += f"\nüí≠ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:\n"
        msg += f"   –õ–∏–º–∏—Ç –≤ –¥–µ–Ω—å: {MAX_AUTO_SAVES_PER_DAY}\n"
        msg += f"   –í–∞–∂–Ω–æ—Å—Ç—å: {AUTO_SAVE_IMPORTANCE}/10\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–Ω—ä–µ–∫—Ü–∏–π
        if INJECTION_SYSTEM_ENABLED and injection_system:
            injection_stats = injection_system.get_stats()
            msg += f"\n\nüéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—ä–µ–∫—Ü–∏–∏:\n"
            msg += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {injection_stats['active_users']}\n"
            msg += f"   –í—Å–µ–≥–æ –∏–Ω—ä–µ–∫—Ü–∏–π: {injection_stats['total_injections']}\n"
            msg += f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ: {injection_stats.get('cached_injections', 0)}\n"
            msg += f"   –°—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã (—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)\n"
        else:
            msg += f"\n\nüéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—ä–µ–∫—Ü–∏–∏: ‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã\n"
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def admin_deactivate_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_deactivate_password"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_deactivate_password <–ø–∞—Ä–æ–ª—å>")
            return
        
        password = args[0]
        
        if deactivate_password(password):
            await update.message.reply_text(f"‚úÖ –ü–∞—Ä–æ–ª—å '{password}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–æ–ª—å '{password}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.")

async def admin_auth_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_auth_log"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        target_user_id = None
        if context.args:
            try:
                target_user_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
        
        logs = get_auth_log(user_id=target_user_id, limit=20)
        
        if not logs:
            await update.message.reply_text("üìù –õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        msg = f"üìú –õ–û–ì–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò"
        if target_user_id:
            msg += f" (user {target_user_id})"
        msg += f" - –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}:\n" + "="*30 + "\n"
        
        for log in logs[:10]:
            timestamp = datetime.fromisoformat(log['timestamp']).strftime("%d.%m %H:%M")
            action_emoji = {
                'password_success': '‚úÖ',
                'password_fail': '‚ùå',
                'auto_expired': '‚è∞',
                'blocked': 'üö´',
                'unblocked': 'üîì',
                'manual_logout': 'üëã'
            }.get(log['action'], 'üìù')
            
            msg += f"{action_emoji} {timestamp} | U{log['user_id']} | {log['action']}\n"
            if log['password_masked']:
                msg += f"   –ü–∞—Ä–æ–ª—å: {log['password_masked']}\n"
            if log['details']:
                msg += f"   {log['details']}\n"
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")

async def admin_blocked_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_blocked_users"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        blocked = get_blocked_users()
        
        if not blocked:
            await update.message.reply_text("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            return
        
        msg = f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï ({len(blocked)} —á–µ–ª.):\n" + "="*30 + "\n"
        
        for user in blocked:
            remaining_min = user['remaining_seconds'] // 60
            msg += (
                f"User {user['user_id']}:\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å: {remaining_min} –º–∏–Ω\n"
                f"  –ü–æ–ø—ã—Ç–æ–∫: {user['failed_attempts']}\n\n"
            )
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")

async def admin_unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_unblock_user"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_unblock_user <user_id>")
            return
        
        try:
            target_user_id = int(args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        if unblock_user(target_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")



# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================================

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    can_proceed, auth_message = await check_auth_and_limits(update, context)
    
    if not can_proceed:
        await update.message.reply_text(auth_message)
        return
    
    await update.message.reply_text(random.choice(PHOTO_REPLIES))

async def handle_image_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith("image/"):
        await handle_photo(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text.strip()
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:100]}")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL
    ensure_user_exists(user_id, username, first_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π TTL
    if INJECTION_SYSTEM_ENABLED and redis_client:
        try:
            activity_key = f"himera:user_activity:{user_id}"
            redis_client.incr(activity_key)
            redis_client.expire(activity_key, 604800)  # TTL 7 –¥–Ω–µ–π
        except Exception as e:
            logger.debug(f"Failed to update user activity: {e}")

    state = get_user_state(user_id)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
        if state['auth_state'] == 'waiting_password' and state['waiting_password_since']:
            waiting_time = (utc_now() - state['waiting_password_since']).total_seconds()
            if waiting_time > AUTH_TIMEOUT:
                update_user_state(user_id, auth_state='unauthorized', waiting_password_since=None)
                await update.message.reply_text(
                    f"‚ú∑ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–æ ({AUTH_TIMEOUT//60} –º–∏–Ω).\n"
                    f"‚ú∑ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        if state['auth_state'] == 'waiting_password':
            await handle_password_input(update, context, user_message)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç–æ–≤
        can_proceed, auth_message = await check_auth_and_limits(update, context)
        
        if not can_proceed:
            await update.message.reply_text(auth_message)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode = detect_mode(user_message, user_id)
        logger.info(f"–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {mode}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ PostgreSQL
        emotion_label, emotion_confidence = get_emotion(user_message)
        add_message_to_history_with_cleanup(user_id, "user", user_message, emotion_label, emotion_confidence, mode)

        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
        messages = build_enhanced_context_with_ltm_smart(user_id, user_message, mode, history_limit=HISTORY_LIMIT)
        
        
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê –° JSON –†–ï–ñ–ò–ú–û–ú ===
        
        final_response = None
        
        if USE_JSON_OUTPUT:
            try:
                response = await ask_deepseek_with_typing(
                    update, context, messages, mode=mode, use_json=True
                )
                json_response = json.loads(response)
                clean_text = json_response.get("response", "")
                
                if not clean_text:
                    raise ValueError("–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ response –≤ JSON")
                
                if detect_format_violation(clean_text):
                    logger.warning(f"JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {clean_text[:100]}")
                    clean_text = clean_bot_response(clean_text)
                
                json_stats['success'] += 1
                final_response = clean_text
                
            except (json.JSONDecodeError, ValueError, KeyError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
                json_stats['failures'] += 1
                
                if JSON_FALLBACK_ENABLED:
                    logger.info("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º –±–µ–∑ JSON")
                    json_stats['fallbacks'] += 1
                    
                    fallback_response = await ask_deepseek_with_typing(
                        update, context, messages, mode=mode, use_json=False
                    )
                    final_response = clean_bot_response(fallback_response)
                else:
                    final_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        else:
            # JSON —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
            response = await ask_deepseek_with_typing(
                update, context, messages, mode=mode, use_json=False
            )
            
            if detect_format_violation(response):
                logger.warning(f"–§–æ—Ä–º–∞—Ç –Ω–∞—Ä—É—à–µ–Ω: {response[:100]}")
                add_message_to_history(user_id, "system", INJECTION_PROMPT)
            
            final_response = clean_bot_response(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ PostgreSQL
        add_message_to_history_with_cleanup(user_id, "assistant", final_response, bot_mode=mode)
        
        
        
        # === –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï ===
        
        auto_save_notification = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –¥–∏–∞–ª–æ–≥–∞
        if should_auto_save(emotion_label, user_message):
            auth_status = check_user_auth_status(user_id)
            if auth_status.get('authorized'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–ï–ö–£–©–£–Æ –ø–∞—Ä—É –¥–∏–∞–ª–æ–≥–∞
                auto_save_result = auto_save_conversation(
                    user_id=user_id, 
                    user_message=user_message,      # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot_response=final_response,     # –¢–æ–ª—å–∫–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    emotion_primary=emotion_label
                )
                if auto_save_result:
                    logger.info(f"‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {auto_save_result}: '{user_message[:30]}...' -> '{final_response[:30]}...'")
                    auto_save_notification = f"\n\n‚ú® –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å ‚ú®"
        
        
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –ù–ê –ò–ù–ò–¶–ò–ê–¶–ò–Æ ===
        
        if PROACTIVE_ENGINE_ENABLED and proactive_engine:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏—é
            try:
                was_response = proactive_engine.process_user_response(
                    user_id=user_id,
                    message=user_message,
                    emotion=emotion_label,
                    emotion_confidence=emotion_confidence
                )
                
                if was_response:
                    logger.info(f"Processed response to proactive initiation from user {user_id}")
                    
            except Exception as e:
                logger.error(f"Error processing proactive response: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        await update.message.reply_text(final_response + auto_save_notification)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



# ========================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ========================================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏...")
    
    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—ä–µ–∫—Ü–∏–π –≤ ltm_database
    from ltm_database import set_injection_system
    set_injection_system(INJECTION_SYSTEM_ENABLED, injection_system)
    if not init_ltm():
        logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å!")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ —Ñ–∞–π–ª .env.ltm")
        return
    else:
        logger.info("‚úÖ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    try:
        from auth_database import test_auth_functions
        if test_auth_functions():
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PostgreSQL –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        cleanup_old_limits()
        cleanup_expired_users()
        cleanup_old_memories()
        cleanup_old_auto_saves()
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info(f"JSON Output —Ä–µ–∂–∏–º: {'–í–ö–õ–Æ–ß–ï–ù' if USE_JSON_OUTPUT else '–í–´–ö–õ–Æ–ß–ï–ù'}")
    logger.info(f"JSON Fallback: {'–í–ö–õ–Æ–ß–ï–ù' if JSON_FALLBACK_ENABLED else '–í–´–ö–õ–Æ–ß–ï–ù'}")
    logger.info(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –ª–∏–º–∏—Ç {MAX_AUTO_SAVES_PER_DAY}/–¥–µ–Ω—å, –≤–∞–∂–Ω–æ—Å—Ç—å {AUTO_SAVE_IMPORTANCE}")

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # ========================================
    # –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ê–ö–¢–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´
    # ========================================
    
    async def setup_proactive_system(app):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        global PROACTIVE_ENGINE_ENABLED, proactive_engine
        
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º telegram_app
            proactive_engine = ProactiveInitiationEngine(
                postgres_conn=None,
                redis_client=redis_client,
                telegram_app=app
            )
            
            PROACTIVE_ENGINE_ENABLED = True
            logger.info("‚úÖ ProactiveInitiationEngine —Å–æ–∑–¥–∞–Ω")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤ cron_jobs
            cron_jobs.set_proactive_engine(proactive_engine)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            setup_proactivity_for_new_users()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            cron_jobs.start_proactive_cron()
            
            logger.info("ü§ñ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            import traceback
            traceback.print_exc()
            PROACTIVE_ENGINE_ENABLED = False
            proactive_engine = None
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    application.post_init = setup_proactive_system
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("logout", logout_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    application.add_handler(CommandHandler("remember", remember_command))
    application.add_handler(CommandHandler("memory_stats", memory_stats_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    application.add_handler(CommandHandler("writeme", writeme_command))
    application.add_handler(CommandHandler("dontwrite", dontwrite_command))
    application.add_handler(CommandHandler("writeme_pause", writeme_pause_command))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_add_password", admin_add_password))
    application.add_handler(CommandHandler("admin_list_passwords", admin_list_passwords))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("admin_deactivate_password", admin_deactivate_password))
    application.add_handler(CommandHandler("admin_auth_log", admin_auth_log))
    application.add_handler(CommandHandler("admin_blocked_users", admin_blocked_users))
    application.add_handler(CommandHandler("admin_unblock_user", admin_unblock_user))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.IMAGE, handle_image_doc))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    
    logger.info("üöÄ –•–∏–º–µ—Ä–∞ –õ–∞–π—Ç –∑–∞–ø—É—â–µ–Ω–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å")
    



    
    try:
        application.run_polling(close_loop=False)   # —Ü–∏–∫–ª –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç
    finally:
        if PROACTIVE_ENGINE_ENABLED:
            cron_jobs.stop_proactive_cron()
            logger.info("‚úÖ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
        import asyncio
        asyncio.get_event_loop().close()            # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º–∏


    
    """
    try:
        application.run_polling()
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if PROACTIVE_ENGINE_ENABLED:
            cron_jobs.stop_proactive_cron()
            logger.info("‚úÖ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    """
    

if __name__ == "__main__":
    main()